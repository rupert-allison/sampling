Example Nested sampling and affine-invariant
sampling routines used by
R. Allison & J. Dunkley in
http://arxiv.org/abs/1308.2675

========

This repository contains 3 files:

1. affine.py
2. nestsamp.py
3. README.txt (this document)

========

	************
	1. affine.py
	************

Run affine.py from a terminal with

python affine.py

A plot of the evolution of the mean walker position 
will be generated and also an output file 
(by default 'outputAI.txt') containing the walker postions. 

Within the affine.py file one can vary the form of the likelihood
(by default a multi-variate Gaussian with user-defined mean 
and covariance). One can easily modify the script 
to call an externally defined likelihood function. 

One may alter prior ranges and initial walker positions
(all this should be clear when looking at affine.py)

To read in a chain of points from an output 
file (e.g. 'outputAI.txt') generated by affine.py,
open a python session and import some standard modules 

import numpy as np
import matplotlib.pyplot as plt

Then read in the file

chain = np.loadtxt('outputAI.txt')

Now reshape the array to shape (nmoves, nwalkers, D):

nwalkers = 50  ## Change this to match nwalkers in affine.py
nmoves = chain.shape[0]/nwalkers
D = chain.shape[1]
chain = np.reshape(chain, (nmoves, nwalkers, D))

Now chain[0] holds the positions of all the 
walkers at the first step, chain[1] the positions
of all the walkers at the second step, and so on.

Let's plot the mean position at each step:

mean = np.mean(chain, axis = 1)
plt.scatter(mean.T[0], mean.T[1])
plt.show()

========

	**************
	2. nestsamp.py
	**************

Run nestsamp.py form the terminal with

python nestsamp.py

This will return the inferred mean and covariance of the posterior 
distribution. The weights, likelihoods and sample points
are written to an output file (by default 'outputNS.txt'), in the form

weight  log(likelihood)  param1  param2  ... 

Within nestsamp.py the user may vary many settings such as 
the form of the likelihood, the input mean and covariance in the
case of a Gaussian likelihood, and the prior ranges for
each parameter. This should be apparent when looking in nestsamp.py

Let's plot the weights p_i as a function of iteration number:

python
import numpy as np
import matplotlib.pyplot as plt
chain = np.loadtxt('outputNS.txt')
plt.plot(chain.T[0])
plt.xlabel(r'$i$')
plt.ylabel(r'$p_i$')
plt.show()

========
